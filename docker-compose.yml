services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "5555:80"
    depends_on:
      - api
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  postgres:
    image: postgres:14
    environment:
      POSTGRES_USER: videotranscriber
      POSTGRES_PASSWORD: videotranscriber
      POSTGRES_DB: videotranscriber
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5435:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U videotranscriber"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  api:
    build:
      context: .
      dockerfile: services/api_service/Dockerfile
    volumes:
      - ./data:/app/data
      - ./common:/app/common
      - ./services/api_service:/app/api_service
      - ./services/transcription_service:/app/transcription_service
      - ./services/summarization_service:/app/summarization_service
    depends_on:
      postgres:
        condition: service_healthy
      ollama:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://videotranscriber:videotranscriber@postgres/videotranscriber
      - LLM_HOST=http://ollama:11434/api/generate
      - LLM_MODEL=deepseek-r1
      - PYTHONUNBUFFERED=1
      - SKIP_DB_INIT=${SKIP_DB_INIT:-false}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=videotranscriber
      - RABBITMQ_PASSWORD=videotranscriber
      - VIDEO_DIRS=${VIDEO_DIRS:-/app/data/videos}
    ports:
      - "8000:8000"
    command: ["sh", "-c", "pip install pika==1.3.2 && python -m api.main"]
    working_dir: /app/api_service
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  transcription-worker:
    build:
      context: .
      dockerfile: services/transcription_service/Dockerfile
    volumes:
      - ./data:/app/data
      - ./common:/app/common
      - ./services/transcription_service:/app/transcription_service
    depends_on:
      postgres:
        condition: service_healthy
      api:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    environment:
      - API_URL=http://api:8000
      - PYTHONUNBUFFERED=1
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=videotranscriber
      - RABBITMQ_PASSWORD=videotranscriber
      - MAX_WORKERS=${MAX_WORKERS:-1}
      - VIDEO_DIRS=${VIDEO_DIRS:-/app/data/videos}
    command:
      ["python", "-m", "transcription.main", "--max-workers=${MAX_WORKERS:-1}"]
    working_dir: /app/transcription_service
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: "2.0"
        reservations:
          memory: 4G
          cpus: "1.0"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  summarization-worker:
    build:
      context: .
      dockerfile: services/summarization_service/Dockerfile
    volumes:
      - ./data:/app/data
      - ./common:/app/common
      - ./services/summarization_service:/app/summarization_service
    depends_on:
      postgres:
        condition: service_healthy
      ollama:
        condition: service_healthy
      api:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://videotranscriber:videotranscriber@postgres/videotranscriber
      - LLM_HOST=http://ollama:11434/api/generate
      - LLM_MODEL=deepseek-r1
      - API_URL=http://api:8000
      - PYTHONUNBUFFERED=1
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=videotranscriber
      - RABBITMQ_PASSWORD=videotranscriber
    command:
      ["sh", "-c", "pip install pika==1.3.2 && python -m summarization.main"]
    working_dir: /app/summarization_service
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  ollama:
    image: ollama/ollama:latest
    volumes:
      - ./ollama-data:/root/.ollama
      - ./ollama-entrypoint.sh:/ollama-entrypoint.sh
    ports:
      - "11434:11434"
    restart: unless-stopped
    entrypoint: ["/ollama-entrypoint.sh"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s # Give time for the model to be pulled
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  watcher:
    build:
      context: .
      dockerfile: services/watcher_service/Dockerfile
    volumes:
      - ./data:/app/data
      - ./common:/app/common
      - ./services/api_service:/app/api_service
      - ./services/watcher_service:/app/watcher_service
    depends_on:
      postgres:
        condition: service_healthy
      api:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://videotranscriber:videotranscriber@postgres/videotranscriber
      - API_URL=http://api:8000
      - PYTHONUNBUFFERED=1
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_USER=videotranscriber
      - RABBITMQ_PASSWORD=videotranscriber
      - VIDEO_DIRS=${VIDEO_DIRS:-/app/data/videos}
    command:
      ["sh", "-c", "pip install pika==1.3.2 && python -m watcher.watcher"]
    working_dir: /app/watcher_service
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672" # AMQP protocol port
      - "15672:15672" # Management UI port
    environment:
      - RABBITMQ_DEFAULT_USER=videotranscriber
      - RABBITMQ_DEFAULT_PASS=videotranscriber
      # Configure frame size limits to prevent frame_too_large errors
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit frame_max 131072
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.5"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres-data:
