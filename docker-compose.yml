services:
  postgres:
    image: postgres:14
    environment:
      POSTGRES_USER: videotranscriber
      POSTGRES_PASSWORD: videotranscriber
      POSTGRES_DB: videotranscriber
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5435:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U videotranscriber"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  api:
    build:
      context: .
      dockerfile: api-service/Dockerfile
    volumes:
      - ./data:/app/data
      - ./common:/app/common
      - ./api-service:/app/api-service
      - ./transcription-service:/app/transcription-service
      - ./summarization-service:/app/summarization-service
    depends_on:
      postgres:
        condition: service_healthy
      ollama:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://videotranscriber:videotranscriber@postgres/videotranscriber
      - LLM_HOST=http://ollama:11434/api/generate
      - LLM_MODEL=deepseek-r1
      - PYTHONUNBUFFERED=1
      - SKIP_DB_INIT=${SKIP_DB_INIT:-false}
    ports:
      - "8000:8000"
    command: ["python", "-m", "api.main"]
    working_dir: /app/api-service
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  transcription-worker:
    build:
      context: .
      dockerfile: transcription-service/Dockerfile
    volumes:
      - ./data:/app/data
      - ./common:/app/common
      - ./transcription-service:/app/transcription-service
    depends_on:
      postgres:
        condition: service_healthy
      api:
        condition: service_started
    environment:
      - DATABASE_URL=postgresql://videotranscriber:videotranscriber@postgres/videotranscriber
      - API_URL=http://api:8000
      - PYTHONUNBUFFERED=1
    command: ["python", "-m", "transcription.main"]
    working_dir: /app/transcription-service
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  summarization-worker:
    build:
      context: .
      dockerfile: summarization-service/Dockerfile
    volumes:
      - ./data:/app/data
      - ./common:/app/common
      - ./summarization-service:/app/summarization-service
    depends_on:
      postgres:
        condition: service_healthy
      ollama:
        condition: service_healthy
      api:
        condition: service_started
    environment:
      - DATABASE_URL=postgresql://videotranscriber:videotranscriber@postgres/videotranscriber
      - LLM_HOST=http://ollama:11434/api/generate
      - LLM_MODEL=deepseek-r1
      - API_URL=http://api:8000
      - PYTHONUNBUFFERED=1
    command: ["python", "-m", "summarization.main"]
    working_dir: /app/summarization-service
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  ollama:
    image: ollama/ollama:latest
    volumes:
      - ./ollama-data:/root/.ollama
      - ./ollama-entrypoint.sh:/ollama-entrypoint.sh
    ports:
      - "11434:11434"
    restart: unless-stopped
    entrypoint: ["/ollama-entrypoint.sh"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s # Give time for the model to be pulled
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  watcher:
    build:
      context: .
      dockerfile: watcher-service/Dockerfile
    volumes:
      - ./data:/app/data
      - ./common:/app/common
      - ./api-service:/app/api-service
      - ./watcher-service:/app/watcher-service
    depends_on:
      postgres:
        condition: service_healthy
      api:
        condition: service_started
    environment:
      - DATABASE_URL=postgresql://videotranscriber:videotranscriber@postgres/videotranscriber
      - API_URL=http://api:8000
      - PYTHONUNBUFFERED=1
    command: ["python", "-m", "watcher.watcher"]
    working_dir: /app/watcher-service
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres-data:
